generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id         String    @id @default(uuid())
  email      String?   @unique
  createdAt  DateTime  @default(now())
  memories   Memory[]
  entities   Entity[]
  summaries  Summary[]
  chats      Chat[]

  @@map("users")
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  ChatMessage[]

  @@map("chats")
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      String   // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())
  isTripletExtracted Boolean @default(false)
  entityLinks EntityLink[]

  @@map("chat_messages")
}

model Memory {
  id                String      @id @default(uuid())
  userId            String
  type              String?     // 'note','voice_transcript','entity','task','event','number', etc.
  content           String
  source            String?     // 'mobile','web','email','twitter','import'
  createdAt         DateTime    @default(now())
  recordedAt        DateTime?   // When the event actually happened
  parentContextId   String?     // Link to a higher-level context memory
  metadata          Json?       // { language, confidence, detected_entities }
  deleted           Boolean     @default(false)
  isSummarized      Boolean     @default(false)
  isTripletExtracted Boolean     @default(false)
  
  // NEW FIELDS for smart weighting
  accessCount       Int      @default(0)
  lastAccessedAt    DateTime @default(now())
  confidenceScore   Float    @default(1.0)  // For forgetting mechanism
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  embeddings        Embedding[]
  entityLinks       EntityLink[]

  @@map("memories")
}

model Embedding {
  id        String   @id @default(uuid())
  memoryId  String
  modelName String?
  embedding Unsupported("vector(768)")
  createdAt DateTime @default(now())
  memory    Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@map("embeddings")
}

model Entity {
  id            String       @id @default(uuid())
  userId        String
  name          String
  type          String?      // person, org, date, location, product, number, etc.
  canonicalForm String?
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectLinks  EntityLink[] @relation("SubjectLinks")
  objectLinks   EntityLink[] @relation("ObjectLinks")

  @@unique([userId, name])
  @@map("entities")
}

model EntityLink {
  id         String    @id @default(uuid())
  entityId   String    // Subject
  objectId   String?   // Object (optional, if linking to another entity)
  memoryId   String?   // Memory (optional, if linking to a memory)
  chatMessageId String? // NEW
  role       String?   // Predicate
  confidence Float?
  
  subjectEntity Entity @relation("SubjectLinks", fields: [entityId], references: [id], onDelete: Cascade)
  objectEntity  Entity? @relation("ObjectLinks", fields: [objectId], references: [id], onDelete: Cascade)
  memory        Memory? @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  chatMessage   ChatMessage? @relation(fields: [chatMessageId], references: [id], onDelete: Cascade) // NEW

  @@map("entity_links")
}

model Summary {
  id              String    @id @default(uuid())
  userId          String
  title           String?
  content         String
  sourceMemoryIds String[]
  level           Int       // 0: atomic, 1: day, 2: week
  modelName       String?
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("summaries")
}